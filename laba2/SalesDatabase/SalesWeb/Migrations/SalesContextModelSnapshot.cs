// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesDatabase.Data;

#nullable disable

namespace SalesWeb.Migrations
{
    [DbContext(typeof(SalesContext))]
    partial class SalesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesDatabase.Data.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreditCardNumber = "58935971388175067562",
                            Email = "Elsa29@hotmail.com",
                            Name = "Tamia"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreditCardNumber = "5020756992298143",
                            Email = "Dakota.Feest@yahoo.com",
                            Name = "Percy"
                        },
                        new
                        {
                            CustomerId = 3,
                            CreditCardNumber = "3575-1533-6453-2941",
                            Email = "Oren89@gmail.com",
                            Name = "Jaylin"
                        },
                        new
                        {
                            CustomerId = 4,
                            CreditCardNumber = "6767-8006-9790-9565",
                            Email = "Aurelia_Sauer86@yahoo.com",
                            Name = "Isom"
                        },
                        new
                        {
                            CustomerId = 5,
                            CreditCardNumber = "6771-8903-9553-3738",
                            Email = "Alanna22@hotmail.com",
                            Name = "Ora"
                        },
                        new
                        {
                            CustomerId = 6,
                            CreditCardNumber = "5018589614353598",
                            Email = "Deontae.Pfeffer@yahoo.com",
                            Name = "Ines"
                        },
                        new
                        {
                            CustomerId = 7,
                            CreditCardNumber = "3010-527593-6798",
                            Email = "Chester.Beatty54@yahoo.com",
                            Name = "Micheal"
                        },
                        new
                        {
                            CustomerId = 8,
                            CreditCardNumber = "5445-3883-2176-8872",
                            Email = "Claude.Prohaska89@gmail.com",
                            Name = "Elian"
                        },
                        new
                        {
                            CustomerId = 9,
                            CreditCardNumber = "6378-3614-1562-7790",
                            Email = "Mozelle61@yahoo.com",
                            Name = "Jack"
                        },
                        new
                        {
                            CustomerId = 10,
                            CreditCardNumber = "5595-6518-7128-6084",
                            Email = "Meda54@gmail.com",
                            Name = "Elta"
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("No description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Licensed Concrete Shirt",
                            Price = 1483,
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Incredible Frozen Towels",
                            Price = 3730,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Handcrafted Steel Gloves",
                            Price = 3096,
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 4,
                            Name = "Sleek Metal Shirt",
                            Price = 4976,
                            Quantity = 2
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Refined Concrete Keyboard",
                            Price = 1457,
                            Quantity = 9
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Unbranded Concrete Pants",
                            Price = 1083,
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = 7,
                            Name = "Tasty Rubber Sausages",
                            Price = 2906,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 8,
                            Name = "Ergonomic Fresh Tuna",
                            Price = 4690,
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = 9,
                            Name = "Refined Soft Tuna",
                            Price = 1678,
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = 10,
                            Name = "Unbranded Granite Shirt",
                            Price = 1100,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            CustomerId = 8,
                            Date = new DateTime(2022, 10, 17, 7, 57, 16, 768, DateTimeKind.Local).AddTicks(8108),
                            ProductId = 9,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 2,
                            CustomerId = 5,
                            Date = new DateTime(2022, 11, 25, 7, 25, 16, 913, DateTimeKind.Local).AddTicks(3272),
                            ProductId = 4,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 3,
                            CustomerId = 10,
                            Date = new DateTime(2022, 11, 8, 20, 30, 21, 228, DateTimeKind.Local).AddTicks(8068),
                            ProductId = 2,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 4,
                            CustomerId = 1,
                            Date = new DateTime(2023, 3, 5, 2, 26, 15, 381, DateTimeKind.Local).AddTicks(4937),
                            ProductId = 9,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 5,
                            CustomerId = 1,
                            Date = new DateTime(2022, 10, 9, 12, 9, 45, 38, DateTimeKind.Local).AddTicks(9000),
                            ProductId = 8,
                            StoreId = 10
                        },
                        new
                        {
                            SaleId = 6,
                            CustomerId = 8,
                            Date = new DateTime(2022, 9, 25, 10, 41, 51, 98, DateTimeKind.Local).AddTicks(6307),
                            ProductId = 6,
                            StoreId = 7
                        },
                        new
                        {
                            SaleId = 7,
                            CustomerId = 8,
                            Date = new DateTime(2022, 7, 10, 2, 58, 41, 57, DateTimeKind.Local).AddTicks(6957),
                            ProductId = 1,
                            StoreId = 7
                        },
                        new
                        {
                            SaleId = 8,
                            CustomerId = 7,
                            Date = new DateTime(2022, 6, 6, 17, 8, 15, 901, DateTimeKind.Local).AddTicks(3545),
                            ProductId = 4,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 9,
                            CustomerId = 8,
                            Date = new DateTime(2022, 10, 18, 5, 0, 2, 183, DateTimeKind.Local).AddTicks(8419),
                            ProductId = 4,
                            StoreId = 7
                        },
                        new
                        {
                            SaleId = 10,
                            CustomerId = 6,
                            Date = new DateTime(2022, 6, 3, 1, 44, 15, 121, DateTimeKind.Local).AddTicks(2796),
                            ProductId = 7,
                            StoreId = 8
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Cummings LLC"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Larson - Hane"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Parisian - Yundt"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Schuster - Kohler"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "Senger LLC"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "Quitzon - Corkery"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "Walter Group"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "Wuckert and Sons"
                        },
                        new
                        {
                            StoreId = 9,
                            Name = "Dare - Koepp"
                        },
                        new
                        {
                            StoreId = 10,
                            Name = "Conn - Simonis"
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Sale", b =>
                {
                    b.HasOne("SalesDatabase.Data.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDatabase.Data.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDatabase.Data.Models.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
