// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesDatabase.Data;

#nullable disable

namespace SalesWeb.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20230506142323_ProductsAddColumnDescription")]
    partial class ProductsAddColumnDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesDatabase.Data.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreditCardNumber = "5020664876455492",
                            Email = "Scottie14@hotmail.com",
                            Name = "Lily"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreditCardNumber = "3044-806386-2713",
                            Email = "Demond_Torp@gmail.com",
                            Name = "Wilford"
                        },
                        new
                        {
                            CustomerId = 3,
                            CreditCardNumber = "3470-174304-68872",
                            Email = "Loyce.Corkery69@gmail.com",
                            Name = "Joaquin"
                        },
                        new
                        {
                            CustomerId = 4,
                            CreditCardNumber = "3528-7813-6672-5705",
                            Email = "Kade.White47@gmail.com",
                            Name = "Gussie"
                        },
                        new
                        {
                            CustomerId = 5,
                            CreditCardNumber = "6771-8981-8807-8068",
                            Email = "Bessie91@hotmail.com",
                            Name = "Lamont"
                        },
                        new
                        {
                            CustomerId = 6,
                            CreditCardNumber = "6380-1029-7202-7529",
                            Email = "Wilton.Fritsch@gmail.com",
                            Name = "Roman"
                        },
                        new
                        {
                            CustomerId = 7,
                            CreditCardNumber = "6304-7583-1182-4000",
                            Email = "Frankie_Marks@gmail.com",
                            Name = "Garnet"
                        },
                        new
                        {
                            CustomerId = 8,
                            CreditCardNumber = "3463-609276-36580",
                            Email = "Effie46@hotmail.com",
                            Name = "Madisen"
                        },
                        new
                        {
                            CustomerId = 9,
                            CreditCardNumber = "6771855043940021096",
                            Email = "Marian.Block@hotmail.com",
                            Name = "Danial"
                        },
                        new
                        {
                            CustomerId = 10,
                            CreditCardNumber = "5463-4939-2462-7744",
                            Email = "Octavia.Medhurst36@yahoo.com",
                            Name = "Elta"
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("No description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Practical Cotton Fish",
                            Price = 1905,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Generic Rubber Bacon",
                            Price = 2071,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Fantastic Granite Bike",
                            Price = 764,
                            Quantity = 2
                        },
                        new
                        {
                            ProductId = 4,
                            Name = "Tasty Plastic Chair",
                            Price = 1272,
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Practical Concrete Pizza",
                            Price = 3729,
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Ergonomic Steel Shirt",
                            Price = 2095,
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = 7,
                            Name = "Rustic Granite Gloves",
                            Price = 340,
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = 8,
                            Name = "Sleek Granite Gloves",
                            Price = 1639,
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = 9,
                            Name = "Handmade Fresh Towels",
                            Price = 4799,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 10,
                            Name = "Practical Cotton Keyboard",
                            Price = 1049,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            CustomerId = 8,
                            Date = new DateTime(2022, 8, 30, 21, 14, 55, 169, DateTimeKind.Local).AddTicks(7369),
                            ProductId = 3,
                            StoreId = 3
                        },
                        new
                        {
                            SaleId = 2,
                            CustomerId = 2,
                            Date = new DateTime(2022, 9, 16, 6, 28, 28, 973, DateTimeKind.Local).AddTicks(5933),
                            ProductId = 3,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 3,
                            CustomerId = 5,
                            Date = new DateTime(2022, 9, 15, 10, 26, 32, 360, DateTimeKind.Local).AddTicks(3164),
                            ProductId = 1,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 4,
                            CustomerId = 5,
                            Date = new DateTime(2022, 8, 16, 22, 33, 56, 566, DateTimeKind.Local).AddTicks(3224),
                            ProductId = 2,
                            StoreId = 4
                        },
                        new
                        {
                            SaleId = 5,
                            CustomerId = 5,
                            Date = new DateTime(2023, 4, 16, 7, 56, 13, 268, DateTimeKind.Local).AddTicks(750),
                            ProductId = 6,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 6,
                            CustomerId = 5,
                            Date = new DateTime(2022, 5, 25, 0, 38, 39, 820, DateTimeKind.Local).AddTicks(8903),
                            ProductId = 5,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 7,
                            CustomerId = 9,
                            Date = new DateTime(2023, 2, 19, 12, 6, 31, 800, DateTimeKind.Local).AddTicks(1445),
                            ProductId = 7,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 8,
                            CustomerId = 3,
                            Date = new DateTime(2023, 2, 13, 1, 25, 57, 577, DateTimeKind.Local).AddTicks(1635),
                            ProductId = 7,
                            StoreId = 1
                        },
                        new
                        {
                            SaleId = 9,
                            CustomerId = 8,
                            Date = new DateTime(2023, 4, 25, 9, 38, 50, 553, DateTimeKind.Local).AddTicks(7167),
                            ProductId = 9,
                            StoreId = 8
                        },
                        new
                        {
                            SaleId = 10,
                            CustomerId = 8,
                            Date = new DateTime(2022, 9, 14, 6, 57, 2, 715, DateTimeKind.Local).AddTicks(2495),
                            ProductId = 4,
                            StoreId = 10
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Jakubowski Inc"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Jenkins LLC"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Nader - Hessel"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Lindgren, Bergnaum and Armstrong"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "Blanda and Sons"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "Borer and Sons"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "Gleason - Ferry"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "Bartoletti Inc"
                        },
                        new
                        {
                            StoreId = 9,
                            Name = "Marks LLC"
                        },
                        new
                        {
                            StoreId = 10,
                            Name = "Daugherty Inc"
                        });
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Sale", b =>
                {
                    b.HasOne("SalesDatabase.Data.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDatabase.Data.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDatabase.Data.Models.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDatabase.Data.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
