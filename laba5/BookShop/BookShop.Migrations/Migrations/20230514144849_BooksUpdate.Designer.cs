// <auto-generated />
using System;
using BookShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShop.Migrations.Migrations
{
    [DbContext(typeof(BookShopContext))]
    [Migration("20230514144849_BooksUpdate")]
    partial class BooksUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookShop.DAL.Entities.Author", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("1ac06311-3a34-4702-a539-4e2696b739b1"),
                            FirstName = "Lola",
                            LastName = "Collins"
                        },
                        new
                        {
                            ID = new Guid("1e48cc58-3e7e-4e1b-9c47-dc9f3356feb8"),
                            FirstName = "Ramon",
                            LastName = "Nienow"
                        },
                        new
                        {
                            ID = new Guid("163154dd-77c9-4148-9488-57da9aa2a57c"),
                            FirstName = "Alonzo",
                            LastName = "Johnston"
                        },
                        new
                        {
                            ID = new Guid("4a0c7d3e-8d2d-4415-b126-6ac0dec57591"),
                            FirstName = "Kara",
                            LastName = "Stokes"
                        },
                        new
                        {
                            ID = new Guid("d2ee3e81-dc2b-4e52-b3cb-834909103425"),
                            FirstName = "Robyn",
                            LastName = "Ferry"
                        },
                        new
                        {
                            ID = new Guid("f8e2abbe-bb3f-41d4-a76a-21a773ce2d36"),
                            FirstName = "Jesse",
                            LastName = "Wisozk"
                        },
                        new
                        {
                            ID = new Guid("7e8bc934-6bc9-4ba6-9351-9a5b95c47f15"),
                            FirstName = "Joshua",
                            LastName = "Bergstrom"
                        },
                        new
                        {
                            ID = new Guid("d1ccaa76-7503-4629-9a55-65f38a3349c4"),
                            FirstName = "Edgar",
                            LastName = "Jenkins"
                        },
                        new
                        {
                            ID = new Guid("e08a96ed-d185-45a9-aa08-22a9c3c81712"),
                            FirstName = "Nora",
                            LastName = "Dickens"
                        },
                        new
                        {
                            ID = new Guid("c49a3f52-c761-4569-aced-e6d1f42fc4a7"),
                            FirstName = "Lyle",
                            LastName = "Little"
                        });
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRestriction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Copies")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EditionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            ID = new Guid("e1c5b7de-3687-49ad-95a1-c1da244047e8"),
                            AgeRestriction = "Minor",
                            AuthorId = new Guid("1ac06311-3a34-4702-a539-4e2696b739b1"),
                            Copies = -1156261051,
                            Description = "Inventore voluptatem sapiente veniam aut fugiat quas quisquam.",
                            EditionType = "Normal",
                            Price = 0.5439696916057880m,
                            ReleaseDate = new DateTime(2022, 5, 25, 0, 37, 35, 561, DateTimeKind.Local).AddTicks(7926),
                            Title = "eum"
                        },
                        new
                        {
                            ID = new Guid("f38cb4dd-1230-4426-b574-56955a2b3893"),
                            AgeRestriction = "Teen",
                            AuthorId = new Guid("1e48cc58-3e7e-4e1b-9c47-dc9f3356feb8"),
                            Copies = 1818735980,
                            Description = "Fugiat et sed voluptatem ut iure quaerat repudiandae aut.",
                            EditionType = "Normal",
                            Price = 0.8598095343150630m,
                            ReleaseDate = new DateTime(2022, 10, 28, 13, 29, 59, 383, DateTimeKind.Local).AddTicks(8118),
                            Title = "quis"
                        },
                        new
                        {
                            ID = new Guid("a4c18d35-d549-42f7-aafb-d8d1d8e731af"),
                            AgeRestriction = "Minor",
                            AuthorId = new Guid("163154dd-77c9-4148-9488-57da9aa2a57c"),
                            Copies = -1838443634,
                            Description = "Possimus sunt repellat reprehenderit.\nEveniet officia dolore repellendus recusandae fugiat aut.\nId doloribus sunt.\nVitae dolores qui temporibus.",
                            EditionType = "Normal",
                            Price = 0.7139135149085090m,
                            ReleaseDate = new DateTime(2022, 6, 22, 20, 34, 52, 973, DateTimeKind.Local).AddTicks(9580),
                            Title = "eius"
                        },
                        new
                        {
                            ID = new Guid("723c4735-1327-45e2-b33b-c54a496184ba"),
                            AgeRestriction = "Adult",
                            AuthorId = new Guid("4a0c7d3e-8d2d-4415-b126-6ac0dec57591"),
                            Copies = 1693156380,
                            Description = "Temporibus ea voluptas veritatis dolorem voluptatibus consequatur.",
                            EditionType = "Promo",
                            Price = 0.2044289371685540m,
                            ReleaseDate = new DateTime(2023, 4, 19, 5, 1, 32, 566, DateTimeKind.Local).AddTicks(377),
                            Title = "ullam"
                        },
                        new
                        {
                            ID = new Guid("fe3d7c94-ec0b-4430-b1e7-517fb2c1a4c4"),
                            AgeRestriction = "Teen",
                            AuthorId = new Guid("d2ee3e81-dc2b-4e52-b3cb-834909103425"),
                            Copies = -20632630,
                            Description = "Qui suscipit veniam voluptas ipsam quidem consequatur. Nulla nobis cupiditate deserunt eos et qui consequatur. Ullam laboriosam blanditiis.",
                            EditionType = "Normal",
                            Price = 0.1902058787706120m,
                            ReleaseDate = new DateTime(2023, 2, 4, 18, 24, 24, 890, DateTimeKind.Local).AddTicks(7437),
                            Title = "facere"
                        },
                        new
                        {
                            ID = new Guid("29eab18d-4bbc-48c7-b19b-6da3f2b61737"),
                            AgeRestriction = "Teen",
                            AuthorId = new Guid("f8e2abbe-bb3f-41d4-a76a-21a773ce2d36"),
                            Copies = 731431633,
                            Description = "Enim et voluptas sapiente quia porro ut aut. Accusantium dignissimos hic saepe. Consequatur saepe quia possimus. Odio enim harum provident fugiat architecto ullam eaque qui. Facere quia reiciendis sit eos omnis. Nam ut vitae excepturi.",
                            EditionType = "Gold",
                            Price = 0.2187478726320470m,
                            ReleaseDate = new DateTime(2022, 9, 30, 19, 32, 17, 447, DateTimeKind.Local).AddTicks(2868),
                            Title = "provident"
                        },
                        new
                        {
                            ID = new Guid("976ff3c1-6f68-41b6-87ab-d441cfbee937"),
                            AgeRestriction = "Minor",
                            AuthorId = new Guid("7e8bc934-6bc9-4ba6-9351-9a5b95c47f15"),
                            Copies = -677177094,
                            Description = "Accusamus sint qui ex officiis.\nAccusantium modi aut eos consequatur ut sequi eum ipsum quia.",
                            EditionType = "Gold",
                            Price = 0.4071174326469190m,
                            ReleaseDate = new DateTime(2022, 11, 4, 23, 51, 5, 99, DateTimeKind.Local).AddTicks(5173),
                            Title = "autem"
                        },
                        new
                        {
                            ID = new Guid("3082fc7b-e628-424d-af3c-490abe3c2562"),
                            AgeRestriction = "Minor",
                            AuthorId = new Guid("d1ccaa76-7503-4629-9a55-65f38a3349c4"),
                            Copies = -964355123,
                            Description = "Nulla nihil placeat omnis beatae eveniet sint qui delectus.\nLaborum deleniti voluptatem alias aspernatur animi odio.\nIste enim voluptas nobis eaque optio ducimus.",
                            EditionType = "Normal",
                            Price = 0.6782728600186450m,
                            ReleaseDate = new DateTime(2022, 5, 25, 11, 51, 46, 435, DateTimeKind.Local).AddTicks(6850),
                            Title = "sequi"
                        },
                        new
                        {
                            ID = new Guid("073211a4-6b8e-4b05-b535-c9e608c08bf1"),
                            AgeRestriction = "Adult",
                            AuthorId = new Guid("e08a96ed-d185-45a9-aa08-22a9c3c81712"),
                            Copies = 1137575458,
                            Description = "Vel ad beatae soluta. Dignissimos deleniti autem consequuntur dolores accusantium et et id. Consequatur porro rerum quia voluptate aut et ab. Sunt temporibus ipsa natus maxime omnis a sed quis necessitatibus.",
                            EditionType = "Promo",
                            Price = 0.157021184943110m,
                            ReleaseDate = new DateTime(2023, 3, 1, 10, 49, 52, 680, DateTimeKind.Local).AddTicks(6639),
                            Title = "possimus"
                        },
                        new
                        {
                            ID = new Guid("42307fa6-4a94-4474-b4b5-d06f370dc5a9"),
                            AgeRestriction = "Teen",
                            AuthorId = new Guid("c49a3f52-c761-4569-aced-e6d1f42fc4a7"),
                            Copies = -959455389,
                            Description = "Saepe quo itaque aut at qui repellendus. Delectus aut atque fugiat. Autem voluptatem laborum et quisquam ad. Dolore aliquid incidunt impedit voluptatem occaecati voluptatem. Aut atque temporibus ducimus. Enim deleniti quo dolorem et dolor reprehenderit ut ex.",
                            EditionType = "Normal",
                            Price = 0.7199468266049980m,
                            ReleaseDate = new DateTime(2022, 10, 23, 23, 28, 26, 532, DateTimeKind.Local).AddTicks(1904),
                            Title = "et"
                        });
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("8d6e6e7d-9a18-44c3-9caf-65e58bc94eb4"),
                            Name = "Licensed Frozen Keyboard"
                        },
                        new
                        {
                            ID = new Guid("a97026cf-ec00-43b9-8478-c205e13cb11d"),
                            Name = "Handcrafted Concrete Chair"
                        },
                        new
                        {
                            ID = new Guid("4dc7c321-7c4c-4526-8059-249c34a5e941"),
                            Name = "Fantastic Frozen Shoes"
                        },
                        new
                        {
                            ID = new Guid("e55c88bd-b895-4efd-95c9-8841f9debed8"),
                            Name = "Intelligent Rubber Tuna"
                        },
                        new
                        {
                            ID = new Guid("4b241b52-baf4-4abc-aab4-f6a679ca95d3"),
                            Name = "Intelligent Cotton Bike"
                        },
                        new
                        {
                            ID = new Guid("70247d7b-9c23-40e4-a4e6-0a82b016898f"),
                            Name = "Intelligent Soft Gloves"
                        },
                        new
                        {
                            ID = new Guid("ab582bae-c642-428f-b4e7-e14873a2053c"),
                            Name = "Licensed Rubber Keyboard"
                        },
                        new
                        {
                            ID = new Guid("3db7fc9b-8797-4209-87fa-f61dbf86362b"),
                            Name = "Awesome Concrete Pizza"
                        },
                        new
                        {
                            ID = new Guid("6fa6d230-5488-44f6-a6d6-49967235f5d3"),
                            Name = "Sleek Soft Shoes"
                        },
                        new
                        {
                            ID = new Guid("134fc345-0af9-45fd-8b37-1e210908a1e4"),
                            Name = "Intelligent Wooden Salad"
                        });
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.BookCategory", b =>
                {
                    b.HasOne("BookShop.DAL.Entities.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.DAL.Entities.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Book", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("BookShop.DAL.Entities.Category", b =>
                {
                    b.Navigation("BookCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
